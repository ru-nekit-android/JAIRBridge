<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   creationComplete="creationCompleteHandler(event)" 
			   height="100%">
	
	<fx:Script>
		<![CDATA[
			import com.projectcocoon.p2p.LocalNetworkDiscovery;
			import com.projectcocoon.p2p.events.ClientEvent;
			import com.projectcocoon.p2p.events.GroupEvent;
			import com.projectcocoon.p2p.events.ObjectEvent;
			
			import mx.events.FlexEvent;
			
			private static var p2p:LocalNetworkDiscovery;
			private var connected:Boolean = false;
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				log("Startup...");
			}
			
			private function groupConnectedHandler(event:GroupEvent):void
			{
				log("P2P client connect to group");
			}
			
			private function clientUpdateHandler(event:ClientEvent):void
			{
				log("P2P client update: " + event.client.clientName);
			}
			
			private function clientRemoveHandler(event:ClientEvent):void
			{
				log("P2P client removed: " + event.client.clientName);
			}
			
			private function groupClosedHandler(event:GroupEvent):void
			{
				log("P2P group cloused...");
			}
			
			private function clientAddedHandler(event:ClientEvent):void
			{
				if( event.client.isLocal )
				{
					log("Local P2P client added: " + event.client.peerID);
					p2pConnectButton.enabled = true;
					p2pConnectButton.label = "Disconnect";
				}else{
					log("P2P client added: " + event.client.peerID);
				}
			}
			
			private function log(value:String):void
			{
				statusValue.appendText(value + "\n");
			}
			
			private function p2pConnectClickHandler(event:MouseEvent):void
			{
				if( !p2p )
				{
					p2p = new LocalNetworkDiscovery;
					p2p.autoConnect = false;
				}
				else
				{
					p2p.close();
				}
				connected = !connected;
				if( connected )
				{
					p2p.clientName = (( nameValue.text == "" ||  nameValue.text == null ) ? "web" : keyValue.text);
					p2p.key = "fa34a2a9cd8864b67cdb154d-ac8a93ff4df0";
					p2p.useCirrus = true;
					var groupName:String = "ru.nekit.p2p.group_" + (( keyValue.text == "" || keyValue.text == null ) ? "none" : keyValue.text);
					p2p.groupName = groupName;
					log("P2P channel set group name: " + groupName);
					p2p.addEventListener(ClientEvent.CLIENT_ADDED, 		clientAddedHandler);
					p2p.addEventListener(ClientEvent.CLIENT_UPDATE, 	clientUpdateHandler);
					p2p.addEventListener(ClientEvent.CLIENT_REMOVED, 	clientRemoveHandler);
					p2p.addEventListener(GroupEvent.GROUP_CONNECTED, 	groupConnectedHandler);
					p2p.addEventListener(GroupEvent.GROUP_CLOSED, 		groupClosedHandler);
					p2p.addEventListener(ObjectEvent.OBJECT_ANNOUNCED, 	dataAnnocedHandler);
					p2p.addEventListener(ObjectEvent.OBJECT_PROGRESS, 	dataProgressHandler);
					p2p.addEventListener(ObjectEvent.OBJECT_REQUEST, 	dataRequestHandler);
					p2p.addEventListener(ObjectEvent.OBJECT_COMPLETE, 	dataCompletetHandler);
					p2p.connect();
					log("Local P2P client init connection");
					p2pConnectButton.enabled = false;
					p2pConnectButton.label = "Connection..."
				}
				else
				{
					p2pConnectButton.label = "Connect";
					log("Local P2P client disconnected");
				}
			}
			
			private function statusClearClickHandler(event:MouseEvent):void
			{
				statusValue.text = "";
			}
			
			private function dataAnnocedHandler(event:ObjectEvent):void
			{
				progress.text = "Progress init..."
				progress.visible = true;
				imageContainer.visible = false;
				p2p.requestObject(event.metadata);
			}
			
			private function dataProgressHandler(event:ObjectEvent):void
			{
				progress.text = "Progress " +  int(event.metadata.progress*100) + "%";
			}
			
			private function dataRequestHandler(event:ObjectEvent):void
			{
				
			}
			
			private function dataCompletetHandler(event:ObjectEvent):void
			{
				progress.visible = false;
				var bytes:ByteArray = ByteArray(event.metadata.object);
				imageContainer.visible = true;
				var width:uint = bytes.readUnsignedInt();
				var height:uint = bytes.readUnsignedInt();
				var bmd:BitmapData = new BitmapData(width,height);
				bmd.setPixels(bmd.rect, bytes);
				image.source = bmd;
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout  paddingRight="20" paddingLeft="20" paddingTop="40" gap="20" paddingBottom="40"/>
	</s:layout>
	
	<s:Label textAlign="center" width="100%" text="JAIRBridge Browser App" fontSize="24"/>
	<s:HGroup width="100%" height="100%" bottom="0" top="0">
		<s:VGroup width="25%" height="100%" contentBackgroundColor="0xff8800" contentBackgroundAlpha=".05">
			<s:Label text="Status"/>
			<s:TextArea height="100%" focusEnabled="false" editable="false" id="statusValue" width="100%"/>
			<s:Button label="Clear" click="statusClearClickHandler(event)" width="100%"/>
		</s:VGroup>
		<s:VGroup width="50%" height="100%">
			<s:Group width="100%" height="100%">
				<s:Label id="progress" horizontalCenter="0" verticalCenter="0" visible="false" backgroundAlpha=".3" backgroundColor="0x333333"/>
				<s:VGroup id="imageContainer" visible="false" verticalCenter="0" horizontalCenter="0">
					<s:Image id="image"/>
					<s:Label id="imageName" backgroundAlpha=".3" backgroundColor="0x333333"/>
				</s:VGroup>
			</s:Group>
		</s:VGroup>
		<s:Form width="25%" contentBackgroundColor="0x0088ff" contentBackgroundAlpha=".05">
			<s:layout>
				<s:FormLayout gap="0" />
			</s:layout>
			<s:FormHeading label="Connection"/>
			<s:FormItem label="Name:" width="100%">
				<s:TextInput width="100%" id="nameValue" prompt="web"/>
			</s:FormItem>
			<s:FormItem label="Invite key:" width="100%">
				<s:TextInput width="100%" id="keyValue" prompt="none"/>
			</s:FormItem>
			<s:FormItem width="100%">
				<s:Button label="Connect" width="100%" id="p2pConnectButton" click="p2pConnectClickHandler(event)"/>
			</s:FormItem>
		</s:Form>
	</s:HGroup>
	
</s:Application>